Program : Start-Symbols { Comment ^ Program
	| require_command ^ Program 
	| AccessModifiers-Type # id { field-decl ^ method-decl } } End-Symbols

Start-Symbols : @

End-Symbols : $

AccessModifiers-Type : public 
		     | Private


field-decl : type # id , field-decl 			      
	   | type # id [ intConst ] 				
	   | type # id = constant				
	   | type # id						

method-decl : type # id ( field-decl 
	    | em ) block

block : { var-decl ^ statement }

var-decl : var-decl , type # id 
	 | type # id

type : Ity
     | Sity
     | CwqSequence
     | Ifity
     | Sifity
     | Valueless 
     | Logical

Statement : assign ^ 
 	  | method-call ^
	  | TrueFor-Stmt ^
	  | Whatever-Stmt ^
	  | Respondwith-Stmt

assign : L-value = expr ^

<L â€“value> : id
	   | id [ expr ]

method-call : id ( method-arg ) ^

method-arg : expr 
	   | em

TrueFor-Stmt : TrueFor ( expr ) Statement Else Statement

Whatever-Stmt : Whatever ( expr ) Statement

Respondwith-Stmt : BackedValue # Expression ^ 
		 | BackedValue # id ^

terminatethis _Statement : TerminateThisNow;

expr : id 
     | id [ expr ] 
     | method-call 
     | constant 
     | expr bin-op expr 
     | ! expr 
     | ( expr )

bin-op : arith-op 
       | rel-op 
       | eq-op 
       | cond-op

arith-op : + 
| - 
| * 
| / 
| << 
| >> 
| %

rel-op : < 
| > 
| <= 
| >=

eq-op : == 
| !=

cond-op : && 
| ||

constant : intConstant 
| charConstant 
| bool-constant

bool-constant : true 
| false

require_command : require ( F_name.txt ) ^

F_name : STR

Comment : /- STR -/ 
| --STR
